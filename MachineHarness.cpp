#include <cstdio>
#include "Machine.cpp"

void debugger (const char* output, bool showNum = false, uint32_t number = 0) {
  if (showNum) {
    printf("%s", output);
    printf("%s", " ");
    if (number < 16) printf("0");
    printf("%X\n", number);
  } else {
    printf("%s\n", output);
  }
}

void printMem (uint8_t* mem, uint8_t by) {
  uint8_t* mEnd = mem + (uint8_t)(by*1.5);
  for (uint8_t* m = mem - (uint8_t)(by*.5); m < mEnd; ++m) {
    if (*m < 16) printf("0");
    printf("%X", *m);
  }
  printf("\n");
  for (uint8_t i = 0; i < (by*.5); ++i)
    printf("  ");
  printf("^\n");
}

void printItems (uint8_t* pItems, uint16_t n) {
  printf("Items: ");
  for (uint8_t it = 0; it < n; ++it) {
    Item* item = (Item*)(pItems - ((it+1) * sizeof(Item)));
    printf("len %d, type %X, kind %X; ", item->len, item->type(), item->kind());
  }
  printf("\n");
}

void delay (long unsigned int t) {}


Machine machine = Machine();
uint8_t mem[CHIKA_SIZE];
uint8_t progSize;
uint8_t pNum = 0;

uint8_t loadProg (const char* path) {
  machine.pNum = pNum;
  //uint8_t prog[] = {0x00, 0x00, 0x0A, 0x00, 0x00, 0x01, 0x61, 0x00, 0xEE, 0x00, 0x01, 0x62, 0x00, 0xEE}; //ab
  //uint8_t prog[] = {0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x00, 0x33, 0x44, 0xEE}; //+ 2 2
  //uint8_t prog[] = {0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x01, 0x32, 0x2B, 0x32, 0x3D, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x00, 0x33, 0x44, 0xEE}; //"2+2=4"
  //uint8_t prog[] = {0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x01, 0x32, 0x2B, 0x32, 0x2B, 0x32, 0x3D, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x00, 0x33, 0x44, 0xEE}; //"2+2+2=6"
  //uint8_t prog[] = {0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x01, 0x31, 0x32, 0x33, 0x2B, 0x34, 0x35, 0x36, 0x3D, 0x00, 0x00, 0x12, 0x7B, 0x00, 0x00, 0x00, 0x12, 0xC8, 0x01, 0x00, 0x00, 0x33, 0x44, 0xEE}; //"123+456=...'
  //uint8_t prog[] = {0x00, 0x00, 0x1E, 0x00, 0x00, 0x12, 0x7B, 0x00, 0x00, 0x00, 0x01, 0x2B, 0x00, 0x12, 0xC8, 0x01, 0x00, 0x00, 0x01, 0x3D, 0x00, 0x00, 0x12, 0x7B, 0x00, 0x00, 0x00, 0x12, 0xC8, 0x01, 0x00, 0x00, 0x33, 0xEE};
  //uint8_t prog[] = {0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x10, 0x7B, 0x12, 0xD2, 0x04, 0x00, 0x00, 0x33, 0xEE}; //+ 123B 1234
  uint8_t prog[] = {0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x12, 0x7B, 0x00, 0x00, 0x00, 0x10, 0x7B, 0x12, 0xD2, 0x04, 0x00, 0x00, 0x33, 0xEE};
  for (uint8_t p = 0; p < sizeof(prog); ++p)
    machine.p(p, prog[p]);
  machine.romLen(sizeof(prog));
  return pNum++;
}

void setup() {
  //Read config file
  progSize = CHIKA_SIZE;
  
  machine.mem = mem;
  machine.progSize = progSize;
  machine.loadProg = loadProg;
  machine.delay = delay;
  machine.debugger = debugger;
  machine.printMem = printMem;
  machine.printItems = printItems;

  machine.loadProg("init.chi");
}

void loop () {
  //Round-robin the heartbeats
  for (uint8_t p = 0; p < pNum; ++p)
    machine.heartbeat(p);
}

struct Item2 {
  uint8_t n = 100;
};


int main () {
  setup();
  loop();
}
