

(fn transfer-start
  (dig-w SCL T SDA T SDA F SCL F))

(fn transfer-stop
  (dig-w SCL F SDA F SCL T SDA T))

(fn send-byte byte
  (do b= byte
    (loop 0 8 {dig-w SDA (& 0x80 (<< b #)) SCL T SCL F)})
  (dig-w SDA T SCL T SCL F))

(fn command-start
  (transfer-start)
  (send-byte SA)
  (send-byte 0x00))

(fn send-command command
  (command-start)
  (send-byte command)
  (transfer-stop))

(fn data-start
  (transfer-start)
  (send-byte SA)
  (send-byte 0x40))

(fn init
  (map {p-mode # T} [SDA SCL])
  (do
    sequence= (file-r (str "OLED" COLS ".INI"))
    (loop (len sequence)
      {send-command (nth sequence #)})))

(fn set-pos col page
  (command-start)
  //Column
  (send-byte 0x21)
  (if (= COLS 64)
    (do (send-byte (+ 0x20 col))
        (send-byte 0x60))
    (do (send-byte col)
        (send-byte 0x7F)))
  //Page
  (send-byte 0x22)
  (send-byte page)
  (send-byte 7)
  (transfer-stop))

(fn fill-page page with
  (set-pos 0 page)
  (data-start)
  (do w= with
    (loop COLS {send-byte w}))
  (transfer-stop))

(fn send-char char
  (data-start)
  (send-byte 0x00)
  (do c= (* 1w CHAR-W (- char 32))
      data= (file-r "font6x8.bin" c CHAR-W)
    (loop CHAR-W {send-byte (nth data #)}))
  (transfer-stop))

(fn fill with
  (do w= with
    (loop PAGES {fill-page # w}))
  (set-pos 0 0))


(fn handle-byte x byte
  (binds (.. x)
    (data-start)
    (send-byte byte)
    (transfer-stop)))

(fn handle-char x char
  (do
    is-nl= (= char \nl)
    (binds (.. x)
      (if is-nl N (send-char char))
      c-col=
      (if is-nl 0
        (if (= .c-col MAX-C-COL) 0 (+ .c-col CHAR-W 1)))
      prev-page= c-page
      c-page=
      (if (= c-col 0) (+ .c-page 1) .c-page)
      c-page=
      (if (= .c-page PAGES) 0 .c-page)
      (if (!= prev-page c-page)
        (do
          (fill-page c-page 0x00)
          (set-pos 0 c-page))))))

(fn handle-str2 x string
  (binds (.. x)
    (map send-char [(.. string)])))

(fn handle-str x string
  (reduce handle-char x [(.. string)]))

(fn handle-clear x
  (binds (.. x)
    (fill 0x00)
    c-col= 0 c-page= 0))

(fn heartbeat ctx (val ctx))

(sub "display/byte"  handle-byte)
(sub "display/char"  handle-char)
(sub "display/str"   handle-str)
(sub "display/clear" handle-clear)

(binds
  COLS= 128 PAGES= 8
  SCL= 12 SDA= 11 SA= 0x78
  CHAR-W= 5
  MAX-C-COL=
  (do w= (+ CHAR-W 1)
    (- (* (/ COLS w) w) w))
  c-col= 0 c-page= 0
  (init)
  (set-pos 0 0))