

(fn transfer-start
  (dig-w SCL T SDA T SDA F SCL F))

(fn transfer-stop
  (dig-w SCL F SDA F SCL T SDA T))

(fn send-byte byte
  (do b= byte
    (loop 0 8 {dig-w SDA (& 0x80 (<< b #)) SCL T SCL F)})
  (dig-w SDA T SCL T SCL F))

(fn command-start
  (transfer-start)
  (send-byte SA)
  (send-byte 0x00))

(fn send-command command
  (command-start)
  (send-byte command)
  (transfer-stop))

(fn data-start
  (transfer-start)
  (send-byte SA)
  (send-byte 0x40))

(fn init
  (map {p-mode # T} [SDA SCL])
  (do
    sequence= (file-r (str "OLED" COLS ".INI"))
    (loop (len sequence)
      {send-command (nth sequence #)})))

(fn set-pos col page
  (command-start)
  //Column
  (send-byte 0x21)
  (if (= COLS 64)
    (do (send-byte (+ 0x20 col))
        (send-byte 0x60))
    (do (send-byte col)
        (send-byte 0x7F)))
  //Page
  (send-byte 0x22)
  (send-byte page)
  (send-byte 0x00)
  (transfer-stop))

(fn fill-page page with
  (set-pos 0 page)
  (data-start)
  (do w= with
    (loop COLS {send-byte w}))
  (transfer-stop))

(fn fill with
  (do w= with
    (loop PAGES {fill-page # w}))
  (set-pos 0 0))


(fn handle-byte ctx t byte
  (do (.. ctx)
    (data-start)
    (send-byte byte)
    (transfer-stop))
  (val ctx))

(fn heartbeat ctx (val ctx))

(sub "+/byte" handle-byte)
(do
  ctx=
  [COLS= 128 PAGES= 8
   SCL= 12 SDA= 11 SA= 0x78]
  (.. ctx)
  (init)
  (set-pos 0 0)
  (val ctx))