

(fn transfer-start
  (dig-w SCL T SDA T SDA F SCL F))

(fn transfer-stop
  (dig-w SCL F SDA F SCL T SDA T))

(fn send-byte byte
  (do b= byte
    (loop 8 {dig-w SDA (& 0x80 (<< b #)) SCL T SCL F}))
  (dig-w SDA T SCL T SCL F))

(fn command-start
  (transfer-start)
  (send-byte SA)
  (send-byte 0x00))

(fn send-command command
  (command-start)
  (send-byte command)
  (transfer-stop))

(fn data-start
  (transfer-start)
  (send-byte SA)
  (send-byte 0x40))

(fn init
  (map {p-mode # T} [SDA SCL])
  (do
    sequence= (file-r (str "OLED" COLS ".INI"))
    (loop (len sequence)
      {send-command (nth # sequence)})))

(fn set-pos c p
  (command-start)
  //Column
  (send-byte 0x21)
  (if (= COLS 64)
    (do (send-byte (+ 0x20 c))
        (send-byte 0x60))
    (do (send-byte c)
        (send-byte 0x7F)))
  //Page
  (send-byte 0x22)
  (send-byte p)
  (send-byte 7)
  (transfer-stop))

(fn fill-page p with
  (set-pos 0 p)
  (data-start)
  (do w= with
    (loop COLS {send-byte w}))
  (transfer-stop))

(fn send-char char
  (data-start)
  (send-byte 0x00)
  (do c= (* 1w CHAR-W (- char 32))
      data= (file-r "font6x8.bin" c CHAR-W)
    (loop CHAR-W {send-byte (nth # data)}))
  (transfer-stop))

(fn fill with
  (do w= with
    (loop PAGES {fill-page # w}))
  (set-pos 0 0))


(fn handle-byte x byte
  (binds (.. x)
    (data-start)
    (send-byte byte)
    (transfer-stop)))

(fn handle-char x char
  (do
    is-nl= (= char \nl)
    (binds (.. x)
      (if (!= prev-page page)
        (do
          (fill-page page 0x00)
          (set-pos 0 page)))
      (if is-nl N (send-char char))
      col=
      (if is-nl 0
        (if (= .col MAX-COL) 0 (+ .col CHAR-W 1)))
      prev-page= page
      page=
      (if (= col 0) (+ .page 1) .page)
      page=
      (if (= .page PAGES) 0 .page)
      )))

(fn handle-str x string
  (reduce handle-char x [(.. string)]))

(fn handle-page x p
  (handle-str
    (binds (.. x)
      (fill-page 0 0x00)
      (set-pos 0 0)
      col= 0 page= 0)
    p))

(fn handle-clear x
  (binds (.. x)
    (fill 0x00)
    col= 0 page= 0))

(fn handle-pos? x
  (binds (.. x)
    (pub "dis/pos" [col page])))

(fn handle-pos! x pos
  (binds (.. x)
    col= (nth 0 pos)
    page= (nth 1 pos)
    prev-col= col
    prev-page= page
    (set-pos col page)))

(fn handle-len? x
  (binds (.. x)
    (pub "dis/len"
      [(/ COLS (+ CHAR-W 1)) PAGES])))

(sub "dis/byte"  handle-byte)
(sub "dis/char"  handle-char)
(sub "dis/str"   handle-str)
(sub "dis/page"  handle-page)
(sub "dis/clear" handle-clear)
(sub "dis/pos?"  handle-pos?)
(sub "dis/pos!"  handle-pos!)
(sub "dis/len?"  handle-len?)

(binds
  COLS= 128 PAGES= 8
  SCL= 12 SDA= 11 SA= 0x78
  CHAR-W= 5
  MAX-COL=
  (do w= (+ CHAR-W 1)
    (- (* (/ COLS w) w) w))
  col= 0 page= 0
  prev-col= 0 prev-page= 0
  (init)
  (set-pos 0 0))

(fn heartbeat ctx (val ctx))