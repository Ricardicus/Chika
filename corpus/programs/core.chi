(fn ! x (if x false true))

(fn inc n (+ n 1))
(fn dec n (- n 1))
(fn even? n (= (mod n 2) 0))
(fn odd? n (! (even? n)))
(fn pos? n (<= 0 n))
(fn neg? n (< n 0))
(fn neg n (- 0i n))
(fn abs n (if (pos? n) (neg n) n))

(fn 1st  i (nth i 0))
(fn 2nd  i (nth i 1))
(fn last i (nth i (dec (len i))))
(fn prepend v i (vec i (burst v)))
(fn append  v i (vec (burst v) i))
(fn concat v1 v2 (vec (burst v1) (burst v2)))
(fn !empty? i (!= (len i) 0))

(fn every? vec pred
  (if (= (len vec) 0)
    true
    (if (pred (1st vec))
      (recur (sect vec) pred)
      false)))
(fn some vec pred
  (if (= (len vec) 0)
    nil
    (if (pred (1st vec))
      (1st vec)
      (recur (sect vec) pred))))
(fn filter v pred; filtered
  (if (= (len v) 0)
    filtered
    (do f= (1st v)
      (recur (sect v) pred
        (if (pred f)
          (append filtered f)
          filtered)))))

//e.g. (zip-select [false true false] [\a \b \c]) => \b
(fn zip-select select from
  (if (!empty? select)
    (if (1st select)
      (1st from)
      (recur (sect select) (sect from)))
    nil))

//e.g. (range 0 10 2) => [0 2 4 6 8]
//e.g. (range 10 0 -2i) => [10 8 6 4 2]
(fn range from to step v
  (if (!= from to)
    (recur (+ from step) to step
      (append v from))
    v))

//e.g. (str->int "123") => 123i
(fn n*10^p-1 n p
  (if (== p 1) n
    (* n (pow 10i (- p 1)))))
(fn str->int s
  (reduce +
    (map n*10^p-1
      (map {cast (- # 48) 18} (vec (burst s)))
      (range (len s) 0 -1i))))
