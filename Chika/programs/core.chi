(fn not x (if x false true))

(fn inc n (+ n 1))
(fn dec n (- n 1))
(fn even? n (= (mod n 2) 0))
(fn odd? n (not (even? n)))
(fn pos? n (<= 0 n))
(fn neg? n (< n 0))
(fn neg n (* n -1I))
(fn abs n (if (pos? n) (neg n) n))

(fn first v (nth v 0))
(fn last v (nth v (dec (len v))))
(fn rest v (sect v 1 (dec (len v))))
(fn prepend v i (vec i (burst v)))
(fn append v i (vec (burst v) i))
(fn concat v1 v2 (vec (burst v1) (burst v2)))

(fn every? vec pred
  (if (= (len vec) 0)
    true
    (if (pred (first vec))
      (recur (rest vec) pred)
      false)))
(fn some vec pred
  (if (= (len vec) 0)
    nil
    (if (pred (first vec))
      (first vec)
      (recur (rest vec) pred))))
(fn -filter pred v filtered
  (if (= (len v) 0)
    filtered
    (do f= (first v)
      (recur pred (rest v)
        (if (pred f)
          (append filtered f)
          filtered)))))
(fn filter pred v
  (-filter pred v []))

(fn substr s skip take
  (str (burst (sect (vec (burst s))
                    skip take))))
